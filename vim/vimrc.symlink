set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" ----------------------------------------------------------------------------
"  Bundles
" ----------------------------------------------------------------------------

" Trying these...
" Plugin 'amdt/sunset.git'

" Interface / UI
Plugin 'bling/vim-airline'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'nathanaelkane/vim-indent-guides'

" Git
Plugin 'airblade/vim-gitgutter.git'

" Color Themes
Plugin 'altercation/vim-colors-solarized.git'
Plugin 'tomasr/molokai.git'
Plugin 'chriskempson/tomorrow-theme.git', { 'rtp': 'vim/' }

" Utility
Plugin 'ack.vim'
Plugin 'kien/ctrlp.vim.git'
Plugin 'tpope/vim-commentary.git'
Plugin 'tpope/vim-surround.git'
Plugin 'vim-scripts/Align.git'

" Everything else
Plugin 'kchmck/vim-coffee-script.git'
Plugin 'scrooloose/syntastic.git'
Plugin 'thoughtbot/vim-rspec.git'
Plugin 'tpope/vim-fugitive.git'
Plugin 'tpope/vim-haml.git'
Plugin 'tpope/vim-rails.git'


call vundle#end()
filetype plugin indent on

set noswapfile

set runtimepath^=~/.vim/bundle/ctrlp.vim  " Setup ctrlp

" ----------------------------------------------------------------------------
"  Basic Editing Config
" ----------------------------------------------------------------------------

" if has('mouse')
"   set mouse=a            " Turn on mouse support, if available
" endif
set backup                 " Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set encoding=utf-8         " UTF8 or bust!
set hidden                 " allow unsaved buffers in the background
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
set nowrap                 " do not wrap lines
set softtabstop=2
set shiftwidth=2
set tabstop=2
set formatoptions+=n       " support for numbered/bullet lists
" set textwidth=79           " wrap at 79 chars by default
set virtualedit=block      " allow virtual edit in visual block ..
set cpoptions+=$           " add the dollar character when changing a word
set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

let g:ctrlp_max_files=20000      " double number of files scanned
let g:ctrlp_custom_ignore={
  \ 'dir':  '\v(\.(git|hg|svn))|(db/(data|dumps))|(_local_s3|log|public|tmp|work)|(_bower_components|_site|node_modules)$',
  \ 'file': '\v(*.sublime-)|(\.(exe|so|dll))$'
  \ }


" ----------------------------------------------------------------------------
"  Auto commands
" ----------------------------------------------------------------------------
" autocmd!
" autocmd FileType text setlocal textwidth=78
" Jump to last cursor position unless it's invalid or in an event handler
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif


" ----------------------------------------------------------------------------
"  Colors
" ----------------------------------------------------------------------------
syntax enable
if has ('gui_running')
  set background=light
else
  set background=light
endif
colorscheme solarized


" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" Expand %% to the directory of the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" lead with ,
let mapleader = ","

" Bubble multiple lines
vmap <C-k> xkP`[V`]
vmap <C-j> xp`[V`]

" Always search regular regex
nnoremap / /\v
vnoremap / /\v

" Use tab to jump between matching bracket pairs
nnoremap <tab> %
vnoremap <tab> %

" Toggle spellcheck
nmap <silent> <leader>s :set spell!<CR>
" Toggle paste mode
nmap <leader>p :set invpaste<cr>:set paste?<cr>

" Toggle highlight search
nmap <leader>n :set invhls<cr>:set hls?<cr>

" Toggle text wrapping
nmap <leader>w :set invwrap<cr>:set wrap?<cr>

" Open files with <leader>f
map <leader>f :CtrlP<cr>
" Open files, limited to the directory of the current file
map <leader>gf :CtrlP %%<cr>
" Open file window with currently open buffers
nmap <leader>b :CtrlPBuffer<cr>

" Close current buffer without closing split
nmap <leader>c :bprevious \| bdelete #<cr>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" exit to normal mode with 'jj'
inoremap jj <ESC>
inoremap kk <ESC>

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Use c-n and c-p to cycle buffers
nnoremap <c-n> :bnext<cr>
nnoremap <c-p> :bprevious<cr>

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Insert a hash rocket with <c-l>
imap <c-l> <space>=><space>

" stop using arrow keys
map <Left> :echo "no!"<cr>
map <Right> :echo "no!"<cr>
map <Up> :echo "no!"<cr>
map <Down> :echo "no!"<cr>

" stop accidentally opening help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" helpful split resizing
nnoremap - <c-w>-
nnoremap + <c-w>+

" Indent if we're at the beginning of a line. Else, do completion.
" (from Destroy All Software)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" Set up toggling for relativenumber
function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc
nnoremap <leader>r :call NumberToggle()<cr>

" Quicksave your session
function! Quicksave()
  let session_name = '~/.quick-session.vim'
  let can_save = input('Quicksave? [Y/n]', '')
  if can_save == 'y' || can_save == ''
    exec ':mksession! ' . session_name
    redraw!
  endif
endfunction
function! Quickload()
  let session_name = '~/.quick-session.vim'
  let can_load = input('Quickload? [Y/n]', '')
  if can_load == 'y' || can_load == ''
    exec ':source ' . session_name
    redraw!
  endif
endfunction

nnoremap <F2> :call Quicksave()<cr>
nnoremap <F3> :call Quickload()<cr>


" Rspec.vim mappings
map <leader>t :call RunCurrentSpecFile()<CR>
" map <leader>s :call RunNearestSpec()<CR>
" map <leader>l :call RunLastSpec()<CR>
" map <leader>a :call RunAllSpecs()<CR>

let g:rspec_command = "!bundle exec rspec {spec}"


" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set lazyredraw             " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set scrolloff=8            " keep 8 lines of space above and below the cursor
set ttyfast                " always assume a fast connection


" ----------------------------------------------------------------------------
"  Airline (statusline)
" ----------------------------------------------------------------------------

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_powerline_fonts=1

function! AirlineInit()
  let g:airline_section_a = airline#section#create_left(['mode', 'paste', 'iminsert'])
  let g:airline_section_b = airline#section#create(['branch'])
  let g:airline_section_c = airline#section#create(['file'])

  let g:airline_section_x = airline#section#create([])
  let g:airline_section_y = airline#section#create(['%{airline#util#wrap(airline#parts#filetype(),0)}'])
  let g:airline_section_z = airline#section#create(['%3p%%', ' î‚¡%4l', ':%3c'])
  let g:airline_section_warning = airline#section#create(['whitespace'])
endfunction
autocmd VimEnter * call AirlineInit()


" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " use case insensitive searching
set smartcase              " ^ unless a capital letter is used
set hlsearch               " highlight searches
set gdefault               " always search globally
" set visualbell             " shut the fuck up
set colorcolumn=79,120     " highlight column 79 as a soft reminder


" ----------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ----------------------------------------------------------------------------

function! StripTrailingWhitespace ()
  " Don't strip on these filetypes
  if &ft =~ 'sql'
    return
  endif
  %s/\s\+$//e
endfunction

autocmd BufWritePre * call StripTrailingWhitespace()


" ----------------------------------------------------------------------------
"  Extra commands, sometimes useful
" ----------------------------------------------------------------------------

" Rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
command! RenameFile :call RenameFile()
" map <leader>n :call RenameFile()<cr>

" Open a split for each dirty file in git
function! OpenChangedFiles()
  only " Close all windows, unless they're modified
  let status = system('git status -s | grep "^ \?\(M\|A\)" | cut -d " " -f 3')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "sp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

" Insert the current time
command! InsertTime :normal a<c-r>=strftime('%F %H:%M:%S.0 %z')<cr>

" CSS to Sass

command! StripForSass :execute "%s/}\| {\|;//g"


" ----------------------------------------------------------------------------
"  Per-filetype settings
" ----------------------------------------------------------------------------

au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
au BufNewFile,BufReadPost *.rb setl shiftwidth=2 expandtab
au BufNewFile,BufReadPost *.md setl ft=markdown expandtab

set expandtab


" ----------------------------------------------------------------------------
"  Source local vimrc config
" ----------------------------------------------------------------------------

if filereadable($HOME . '/.vimrc.local')
  source ~/.vimrc.local
endif
