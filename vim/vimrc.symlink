" vim:foldmethod=marker

"  Set Up {{{
" ----------------------------------------------------------------------------
set nocompatible
filetype off

" set the runtime path to include fzf
if isdirectory(expand("$HOME/.fzf"))
  " git install of fzf
  set rtp+=~/.fzf

elseif isdirectory("/usr/local/opt/fzf")
  " homebrew install of fzf
  set rtp+=/usr/local/opt/fzf

endif

" }}}
"  Plugins {{{
" ----------------------------------------------------------------------------

call plug#begin()

" Interface / UI
Plug 'christoomey/vim-tmux-navigator'
Plug 'itchyny/lightline.vim'
Plug 'junegunn/goyo.vim'

" Git
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'

" Color Themes
Plug 'altercation/vim-colors-solarized'
Plug 'dracula/vim'
Plug 'morhetz/gruvbox'
Plug 'thetomcraig/xenomorph.vim'

" Utility
Plug 'jlanzarotta/bufexplorer'
Plug 'junegunn/fzf.vim'
Plug 'mileszs/ack.vim'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vasconcelloslf/vim-interestingwords'

" Languages and Syntaxes
Plug 'sheerun/vim-polyglot'

" Linting
Plug 'w0rp/ale'

" Misc
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

call plug#end()

set noswapfile

" }}}
"  Basic Editing Config {{{
" ----------------------------------------------------------------------------

set backup                 " Store temporary files in a central spot
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" Keep spell file out of .dotfiles
set spellfile=$HOME/.vim-spell-en.utf-8.add
set encoding=utf-8         " UTF8 or bust!
set hidden                 " allow unsaved buffers in the background
set autoindent             " automatic indent new lines
set smartindent            " be smart about it
set nowrap                 " do not wrap lines
set softtabstop=2
set shiftwidth=2
set tabstop=2
set formatoptions+=n       " support for numbered/bullet lists
set virtualedit=block      " allow virtual edit in visual block ..
set cpoptions+=$           " add the dollar character when changing a word
set updatetime=300

" }}}
"  Mouse Config {{{
" ----------------------------------------------------------------------------

set mouse=""               " Disable mouse use by default
set ttymouse=xterm2        " Allow mouse drag events (split resizing)

" }}}
"  Status line (Lightline) {{{
" ----------------------------------------------------------------------------

let g:lightline = {
\ 'colorscheme': 'dracula',
\ 'active': {
\   'left': [['mode', 'paste'], ['relativepath', 'modified'], ['filetype']],
\   'right': [['lineinfo'], ['percent'], ['readonly', 'linter_warnings', 'linter_errors', 'linter_ok']]
\ },
\ 'inactive': {
\   'left': [['relativepath', 'modified']],
\   'right': [['lineinfo'], ['percent'], ['readonly']]
\ },
\ 'component_expand': {
\   'linter_warnings': 'LightlineLinterWarnings',
\   'linter_errors': 'LightlineLinterErrors',
\   'linter_ok': 'LightlineLinterOK'
\ },
\ 'component_type': {
\   'readonly': 'error',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error'
\ },
\ }

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ◆', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('%d ✗', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓ ' : ''
endfunction

autocmd User ALELint call s:MaybeUpdateLightline()

" Update and show lightline but only if it's visible (e.g., not in Goyo)
function! s:MaybeUpdateLightline()
  if exists('#lightline')
    call lightline#update()
  end
endfunction

" }}}
"  Markdown Preview config {{{
" ----------------------------------------------------------------------------

" Don't autostart, use :MarkdownPreview manually
let g:mkdp_auto_start = 0

" Allow :MarkdownPreview command from any file
let g:mkdp_command_for_global = 1


" }}}
"  Search config {{{
" ----------------------------------------------------------------------------

" Use rg instead of ag, if it's available
if executable('rg')
  let g:ackprg = 'rg --vimgrep'
elseif executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Don't jump into the first result automatically
cnoreabbrev Ack Ack!

" }}}
"  ALE (Asynchronous Lint Engine) Config {{{
" ----------------------------------------------------------------------------

" let g:ale_fix_on_save = 1
let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier_eslint']
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_fixers['sass'] = ['stylelint']
let g:ale_javascript_prettier_use_local_config = 1

" }}}
"  fzf config {{{
" ----------------------------------------------------------------------------

" [Buffers] Don't jump to the existing window if possible
let g:fzf_buffers_jump = 0

let g:fzf_layout = { 'down': '~30%' }

" }}}
"  BufExplorer Config {{{
" ----------------------------------------------------------------------------

let g:bufExplorerDisableDefaultKeyMapping=1
let g:bufExplorerShowRelativePath=1
let g:bufExplorerSortBy='fullpath'


" }}}
"  Auto commands {{{
" ----------------------------------------------------------------------------

" Jump to last cursor position unless it's invalid or in an event handler
autocmd BufReadPost *
  \ if line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

autocmd BufWritePre * call StripTrailingWhitespace()


" }}}
"  Colors {{{
" ----------------------------------------------------------------------------

syntax enable

if filereadable($HOME . '/.vim/theme.vim')
  source ~/.vim/theme.vim
endif


" }}}
"  Remapping {{{
" ----------------------------------------------------------------------------

" Set "space bar" as the leader key
let mapleader = "\<Space>"

" Always search regular regex
nnoremap / /\v
vnoremap / /\v

" Create a new tab
nnoremap <leader>tn :tabnew<CR>

" Toggle paste mode
nmap <leader>p :set invpaste<cr>:set paste?<cr>

" Open fzf to search for files
map <leader>f :Files<cr>

" Open fzf to manage buffers
nmap <leader>b :Buffers<cr>

" Open fzf to search tags
nmap <leader>r :Tags<cr>

" Close current buffer without closing split
nmap <leader>c :bprevious \| bdelete #<cr>

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" stop using arrow keys
map <Left> :echo "no!"<cr>
map <Right> :echo "no!"<cr>
map <Up> :echo "no!"<cr>
map <Down> :echo "no!"<cr>

" stop accidentally opening help
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" helpful split resizing
nnoremap - <c-w>-
nnoremap + <c-w>+

" helpful split navigation
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" Indent if we're at the beginning of a line. Else, do completion.
" (from Destroy All Software)
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>


" Tab completion for Coc.vim
" if filereadable($HOME . '/.vim_coc_config.local')
"   source ~/.vim_coc_config.local
" endif



" }}}
"  UI {{{
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set lazyredraw             " turn on lazy redraw
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set shortmess+=c           " Don't pass messages to |ins-completion-menu|.
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set scrolloff=8            " keep 8 lines of space above and below the cursor
set ttyfast                " always assume a fast connection
set modeline               " use in-file settinges when available
set modelines=2


" }}}
"  Visual Cues {{{
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " use case insensitive searching
set smartcase              " ^ unless a capital letter is used
set hlsearch               " highlight searches
set colorcolumn=80,120     " highlight column 80 as a soft reminder


" }}}
"  Set up folding {{{
" ----------------------------------------------------------------------------

set foldenable             " enable folds (default)
set foldlevelstart=10      " open most folds by default
set foldnestmax=10         " nest no more than 10 folds deep
set foldmethod=indent      " auto-create folds by indentation


" }}}
"  Strip all trailing whitespace in file {{{
" ----------------------------------------------------------------------------

function! StripTrailingWhitespace ()
  " Don't strip on these filetypes
  if &ft =~ 'sql'
    return
  endif
  %s/\s\+$//e
endfunction


" }}}
"  Rename current file {{{
" ----------------------------------------------------------------------------

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
command! RenameFile :call RenameFile()


" }}}
"  Use ranger for file exploring {{{
" ----------------------------------------------------------------------------

function! RangerExplorer()
    exec "silent !ranger --choosefile=/tmp/vim_ranger_current_file " . expand("%:p:h")
    if filereadable('/tmp/vim_ranger_current_file')
        exec 'edit ' . system('cat /tmp/vim_ranger_current_file')
        call system('rm /tmp/vim_ranger_current_file')
    endif
    redraw!
  endfunction
map <Leader>x :call RangerExplorer()<CR>


" }}}
"  Toggle settings used for when I pair {{{
" ----------------------------------------------------------------------------

function! TogglePairingMode()
  windo set number!
  windo set cursorline!
  windo set mouse=a
endfunction
command! PairingMode :call TogglePairingMode()

" }}}
"  Set settings for I like for writing {{{
" ----------------------------------------------------------------------------

function! EnableWriteMode()
  set nonumber
  set wrap
  set linebreak
  set ft=markdown
endfunction
command! WriteMode :call EnableWriteMode()

" }}}
"  Per-filetype settings {{{
" ----------------------------------------------------------------------------

autocmd BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
autocmd BufNewFile,BufReadPost *.rb setl shiftwidth=2 expandtab
autocmd BufNewFile,BufReadPost *.md setl ft=markdown expandtab
autocmd BufNewFile,BufReadPost *.py setl tabstop=4 shiftwidth=4 expandtab

autocmd FileType markdown setlocal wrap linebreak

" Enable spell check automatically
autocmd FileType gitcommit,mail,markdown setlocal spell

" Allow hyphenated word autocomplete for stylesheets
autocmd FileType css,scss,sass setlocal iskeyword+=-

autocmd BufRead,BufNewFile /usr/local/etc/nginx/* if &ft == '' | setfiletype nginx | endif

set expandtab


" }}}
"  Source local vimrc config {{{
" ----------------------------------------------------------------------------

if filereadable($HOME . '/.vimrc.local')
  source ~/.vimrc.local
endif

" }}}
