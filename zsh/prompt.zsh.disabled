echo "HELLO FROM PROMPT ZSH"


autoload colors && colors

is_git_repo() {
  [[ -d .git ]] || git rev-parse --git-dir > /dev/null 2>&1
}

git_prompt() {
  if is_git_repo; then
    # in a git repo!
    # echo " $(git_dirty)$(need_push)"
    echo " $(git_branch)$(need_push)"
  else
    # not in a git repo :(
    echo ""
  fi
}

git_branch() {
  echo "on %{$fg[yellow]%}$(git symbolic-ref HEAD 2>/dev/null | awk -F/ {'print $NF'})%{$reset_color%}"
}

git_wip() {
	local wip=$(git log -1 --oneline 2>/dev/null | awk '{print tolower($2)}' | awk '{gsub(/[^a-z]/, ""); print}')
  if [[ "$wip" == "wip" ]]; then
    echo "%{$fg[red]%}± wip%{$reset_color%}"
  else
    echo ""
  fi
}

git_dirty() {
  local git_status="$(git status --porcelain 2>/dev/null)"
  local exit_status=$?

  if [[ "$git_status" == "" ]]; then
    # clean git status
    echo "on %{$fg[green]%}$(git_prompt_info)%{$reset_color%}"
  else
    # unclean git status
    echo "on %{$fg[red]%}$(git_prompt_info)%{$reset_color%}"
  fi
}

git_prompt_info () {
  local ref="$(git symbolic-ref HEAD 2>/dev/null)" || return
  # echo "on %{$fg[yellow]%}${ref#refs/heads/}%{$reset_color%}"
  echo "${ref#refs/heads/}"
}

unpushed () {
  git cherry -v @{upstream} 2>/dev/null
}

need_push () {
  if [[ "$(unpushed)" == "" ]]; then
    echo ""
  else
    echo " with %{$fg[magenta]%}unpushed%{$reset_color%}"
  fi
}

host_prompt() {
  if [ -z ${HOST_NAME_OVERIDE+x} ]; then
    echo "%{$fg[yellow]%}${HOST_NAME_OVERIDE}%{$reset_color%}"
  else
    echo "%{$fg[yellow]%}$(hostname -s)%{$reset_color%}"
  fi
}

# For virtualenv, see python/README.md
virtualenv_prompt() {
  if [ -z ${VIRTUAL_ENV+x} ]; then
    # VIRTUAL_ENV is unset
    echo ""
  else
    # VIRTUAL_ENV is set
    echo "%{$fg[magenta]%}($( basename ${VIRTUAL_ENV} ))%{$reset_color%} "
  fi
}

directory_name(){
  echo "%{$fg[cyan]%}%1/%\/%{$reset_color%}"
}

# Execution time start
prompt_exec_time_preexec_hook() {
  PROMPT_EXEC_TIME_start=$(date +%s)
}

# Execution time end
prompt_exec_time_precmd_hook() {
  [[ -n $PROMPT_EXEC_TIME_duration ]] && unset PROMPT_EXEC_TIME_duration
  [[ -z $PROMPT_EXEC_TIME_start ]] && return
  local PROMPT_EXEC_TIME_stop=$(date +%s)
  PROMPT_EXEC_TIME_duration=$(( $PROMPT_EXEC_TIME_stop - $PROMPT_EXEC_TIME_start ))
  unset PROMPT_EXEC_TIME_start
}

prompt_exec_time() {
  if [[ $PROMPT_EXEC_TIME_duration -ge 10 ]]; then
    echo " ${PROMPT_EXEC_TIME_duration}s"
  fi
}

set_prompt() {
  autoload -Uz add-zsh-hook

  # Add exec_time hooks
  add-zsh-hook preexec prompt_exec_time_preexec_hook
  add-zsh-hook precmd prompt_exec_time_precmd_hook

  export PROMPT=$'\n$(virtualenv_prompt)$(host_prompt) in $(directory_name)$(git_prompt)$(prompt_exec_time)\n$(git_wip)› '
  # export RPROMPT=$'%{$fg_bold[green]%}%~ @ %*%{$reset_color%}'
}

precmd() {
  title "zsh" "%m" "%55<...<%~"
  set_prompt
}
